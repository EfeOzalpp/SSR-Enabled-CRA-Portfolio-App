{"version":3,"file":"src_utils_loading_loading_tsx.server.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAoD;AACpB;AACa;AAEH;AAAA;AAM1C,MAAMO,aAAa,GAAGA,CAAC;EAAEC,YAAY,GAAG;AAAyB,CAAC,KAAK;EACrE,MAAMC,SAAS,GAAGR,6CAAM,CAAiB,IAAI,CAAC;EAC9C,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGT,+CAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEtCF,gDAAS,CAAC,MAAM;IACd;IACA,MAAMY,KAAK,GAAGC,MAAM,CAACC,UAAU;IAC/B,IAAIF,KAAK,IAAI,GAAG,EAAE;MAChBD,OAAO,CAAC,EAAE,CAAC;IACb,CAAC,MAAM,IAAIC,KAAK,IAAI,IAAI,EAAE;MACxBD,OAAO,CAAC,EAAE,CAAC;IACb,CAAC,MAAM;MACLA,OAAO,CAAC,EAAE,CAAC;IACb;IAEA,MAAMI,IAAI,GAAGZ,+DAAoB,CAAC;MAChCM,SAAS,EAAEA,SAAS,CAACQ,OAAQ;MAC7BC,QAAQ,EAAE,KAAK;MACfC,IAAI,EAAE,IAAI;MACVC,QAAQ,EAAE,IAAI;MACdC,aAAa,EAAEjB,8CAAOA;IACxB,CAAC,CAAC;IAEF,OAAO,MAAMW,IAAI,CAACO,OAAO,CAAC,CAAC;EAC7B,CAAC,EAAE,EAAE,CAAC;EAEN,OACEhB,+DAAA;IAAKiB,SAAS,EAAE,0BAA0Bf,YAAY,GAAG,YAAY,GAAG,WAAW,EAAG;IAAAgB,QAAA,EACpFlB,+DAAA;MACEiB,SAAS,EAAC,gBAAgB;MAC1BE,GAAG,EAAEhB,SAAU;MACfiB,KAAK,EAAE;QACLd,KAAK,EAAE,GAAGF,IAAI,IAAI;QAClBiB,MAAM,EAAE,GAAGjB,IAAI;MACjB;IAAE,CACH;EAAC,CACC,CAAC;AAEV,CAAC;AAED,iEAAeH,aAAa,E","sources":["webpack://personal-site/./src/styles/loading-overlay.css","webpack://personal-site/./src/utils/loading/loading.tsx"],"sourcesContent":["","import { useEffect, useRef, useState } from 'react';\r\nimport lottie from 'lottie-web';\r\nimport loading from '../../svg/loading.json';\r\n\r\nimport '../../styles/loading-overlay.css';\r\n\r\ntype LoadingScreenProps = {\r\n  isFullScreen?: boolean;\r\n};\r\n\r\nconst LoadingScreen = ({ isFullScreen = true }: LoadingScreenProps) => {\r\n  const container = useRef<HTMLDivElement>(null);\r\n  const [size, setSize] = useState(70); // default to largest\r\n\r\n  useEffect(() => {\r\n    // Determine viewport width and apply appropriate size\r\n    const width = window.innerWidth;\r\n    if (width <= 767) {\r\n      setSize(32);\r\n    } else if (width <= 1024) {\r\n      setSize(48);\r\n    } else {\r\n      setSize(70);\r\n    }\r\n\r\n    const anim = lottie.loadAnimation({\r\n      container: container.current!,\r\n      renderer: 'svg',\r\n      loop: true,\r\n      autoplay: true,\r\n      animationData: loading,\r\n    });\r\n\r\n    return () => anim.destroy();\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`loading-screen-wrapper ${isFullScreen ? 'fullscreen' : 'contained'}`}>\r\n      <div\r\n        className=\"loading-lottie\"\r\n        ref={container}\r\n        style={{\r\n          width: `${size}px`,\r\n          height: `${size}px`,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingScreen;\r\n"],"names":["useEffect","useRef","useState","lottie","loading","jsx","_jsx","LoadingScreen","isFullScreen","container","size","setSize","width","window","innerWidth","anim","loadAnimation","current","renderer","loop","autoplay","animationData","destroy","className","children","ref","style","height"],"sourceRoot":""}